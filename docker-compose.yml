# Development

version: "3.7"
services:
  postgres:
    image: postgres:12
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - postgresdb:/var/lib/postgresql/data:z
    restart: always

  etl:
    build:
      context: ./etl
      dockerfile: dev.Dockerfile
    depends_on:
      - postgres
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PYTHONDONTWRITEBYTECODE=1
    command: 
      - ["tail", "-f", "/dev/null"] # run forever
    volumes:
      - ./etl:/etl:z
    restart: always
    
  web:
    build:
      context: ./web
      dockerfile: dev.Dockerfile
    depends_on:
      - postgres
    entrypoint:
      - /web/scripts/docker_script.sh
    environment:
      - FLASK_ENV=docker
      - DATABASE_URL=${DATABASE_URL}
      - OPENBLAS_NUM_THREADS=1
      - PYTHONDONTWRITEBYTECODE=1
    ports:
      - 5000:5000
    volumes:
      - ./web:/web:z
    restart: always

  # client:
  #   build:
  #     context: ./client
  #     dockerfile: dev.Dockerfile
  #   depends_on:
  #     - web
  #   env_file:
  #     - .env
  #   ports:
  #     - 8080:8080
  #   command: ["npm", "run", "serve", "--quiet", "--no-progress"]
  #   volumes:
  #     - "./client:/client:z"
  #     - "/client/node_modules"
  #   restart: always

volumes:
  postgresdb:
    name: "postgresdb"
